[{"path":"https://lavaanExtra.remi-theriault.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 lavaanExtra Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/TODOS.html","id":null,"dir":"","previous_headings":"","what":"Development objectives (to-do list)","title":"Development objectives (to-do list)","text":"Add cfa_fit_plot function Get community feedback Make logo","code":""},{"path":"https://lavaanExtra.remi-theriault.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rémi Thériault. Author, maintainer.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thériault R (2022). lavaanExtra: Convenience Functions Package 'lavaan'. R package version 0.0.1.0, https://lavaanExtra.remi-theriault.com.","code":"@Manual{,   title = {lavaanExtra: Convenience Functions for Package `lavaan`},   author = {Rémi Thériault},   year = {2022},   note = {R package version 0.0.1.0},   url = {https://lavaanExtra.remi-theriault.com}, }"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"lavaanextra-convenience-functions-for-lavaan","dir":"","previous_headings":"","what":"Convenience Functions for Package `lavaan`","title":"Convenience Functions for Package `lavaan`","text":"Affords alternative, vector-based syntax lavaan, well convenience functions naming paths defining indirect links automatically. Also offers convenience formatting optimized publication script sharing workflow.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convenience Functions for Package `lavaan`","text":"can install development version lavaanExtra like :","code":"install.packages(\"lavaanExtra\", repos = c(   rempsyc = \"https://rempsyc.r-universe.dev\",   CRAN = \"https://cloud.r-project.org\"))"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"why-use-lavaanextra","dir":"","previous_headings":"","what":"Why use lavaanExtra?","title":"Convenience Functions for Package `lavaan`","text":"Reusable code. Don’t repeat anymore want change things comparing fitting models. Shorter code. point 1, can shorter code, since write simply reuse . items similar patterns, can also use paste0() appropriate item numbers instead typing one every time. Less error-prone code. point 1, can less risk human errors since don’t possibly multiple different version thing (makes easier correct ). Better control code. point 1, control whole flow. change , change everywhere else script, without change manually model. readable code. point 1, people (also ) process information first time make sure ’s specified correctly, every time check new models. Prettier code. format model pretty way, every time. don’t worry manually making model good-looking readable anymore. accessible code. don’t remember exact syntax (although recommended) work. uses intuitive variable names people can understand. benefit apparent beginners, also saves precious typing time veterans.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Convenience Functions for Package `lavaan`","text":"Regression example CFA example SEM example Saturated model Path analysis model Latent model","code":""},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"regression-example","dir":"","previous_headings":"","what":"Regression example","title":"Convenience Functions for Package `lavaan`","text":"","code":"# Define our regression terms (regression <- list(mpg = names(mtcars)[2:5],                     disp = names(mtcars)[4:7])) #> $mpg #> [1] \"cyl\"  \"disp\" \"hp\"   \"drat\" #>  #> $disp #> [1] \"hp\"   \"drat\" \"wt\"   \"qsec\"  # Load library library(lavaanExtra) #> Suggested citation: Thériault, R. (2022). lavaanExtra: Convenience functions for lavaan (R package version 0.0.1.0) [Computer software]. https://lavaanExtra.remi-theriault.com/  # Write the model, and check it mtcars.model <- write_lavaan(regression = regression) cat(mtcars.model) #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> mpg ~ cyl + disp + hp + drat #> disp ~ hp + drat + wt + qsec  # Fit the model with `lavaan` library(lavaan) fit.reg <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)  # Get regression parameters only lavaan_reg(fit.reg) #>   Outcome Predictor      B     p #> 1     mpg       cyl -0.242 0.244 #> 2     mpg      disp -0.287 0.123 #> 3     mpg        hp -0.264 0.128 #> 4     mpg      drat  0.192 0.159 #> 5    disp        hp  0.175 0.177 #> 6    disp      drat -0.177 0.034 #> 7    disp        wt  0.614 0.000 #> 8    disp      qsec -0.186 0.061  # We can get it prettier with the `rempsyc::nice_table` integration lavaan_reg(fit.reg, nice_table = TRUE, highlight = TRUE)"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"cfa-example","dir":"","previous_headings":"","what":"CFA example","title":"Convenience Functions for Package `lavaan`","text":"","code":"# Define latent variables (latent <- list(visual = paste0(\"x\", 1:3),                 textual = paste0(\"x\", 4:6),                 speed = paste0(\"x\", 7:9))) #> $visual #> [1] \"x1\" \"x2\" \"x3\" #>  #> $textual #> [1] \"x4\" \"x5\" \"x6\" #>  #> $speed #> [1] \"x7\" \"x8\" \"x9\"  # Write the model, and check it cfa.model <- write_lavaan(latent = latent) cat(cfa.model) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9  # Fit the model with `lavaan` fit.cfa <- cfa(cfa.model, data = HolzingerSwineford1939)  # Get the summary output summary(fit.cfa, fit.measures = TRUE) #> lavaan 0.6-12 ended normally after 35 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        21 #>  #>   Number of observations                           301 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                85.306 #>   Degrees of freedom                                24 #>   P-value (Chi-square)                           0.000 #>  #> Model Test Baseline Model: #>  #>   Test statistic                               918.852 #>   Degrees of freedom                                36 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    0.931 #>   Tucker-Lewis Index (TLI)                       0.896 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)              -3737.745 #>   Loglikelihood unrestricted model (H1)      -3695.092 #>                                                        #>   Akaike (AIC)                                7517.490 #>   Bayesian (BIC)                              7595.339 #>   Sample-size adjusted Bayesian (BIC)         7528.739 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.092 #>   90 Percent confidence interval - lower         0.071 #>   90 Percent confidence interval - upper         0.114 #>   P-value RMSEA <= 0.05                          0.001 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.065 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   visual =~                                            #>     x1                1.000                            #>     x2                0.554    0.100    5.554    0.000 #>     x3                0.729    0.109    6.685    0.000 #>   textual =~                                           #>     x4                1.000                            #>     x5                1.113    0.065   17.014    0.000 #>     x6                0.926    0.055   16.703    0.000 #>   speed =~                                             #>     x7                1.000                            #>     x8                1.180    0.165    7.152    0.000 #>     x9                1.082    0.151    7.155    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   visual ~~                                            #>     textual           0.408    0.074    5.552    0.000 #>     speed             0.262    0.056    4.660    0.000 #>   textual ~~                                           #>     speed             0.173    0.049    3.518    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.549    0.114    4.833    0.000 #>    .x2                1.134    0.102   11.146    0.000 #>    .x3                0.844    0.091    9.317    0.000 #>    .x4                0.371    0.048    7.779    0.000 #>    .x5                0.446    0.058    7.642    0.000 #>    .x6                0.356    0.043    8.277    0.000 #>    .x7                0.799    0.081    9.823    0.000 #>    .x8                0.488    0.074    6.573    0.000 #>    .x9                0.566    0.071    8.003    0.000 #>     visual            0.809    0.145    5.564    0.000 #>     textual           0.979    0.112    8.737    0.000 #>     speed             0.384    0.086    4.451    0.000  # Get fit indices nice_fit(fit.cfa) #>     Model   chi2 df chi2.df p   CFI   TLI RMSEA  SRMR     AIC      BIC #> 1 fit.cfa 85.306 24   3.554 0 0.931 0.896 0.092 0.065 7517.49 7595.339  # We can get it prettier with the `rempsyc::nice_table` integration nice_fit(fit.cfa, nice_table = TRUE)"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"sem-example","dir":"","previous_headings":"","what":"SEM example","title":"Convenience Functions for Package `lavaan`","text":"structural equation model example. start path analysis first.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"saturated-model","dir":"","previous_headings":"SEM example","what":"Saturated model","title":"Convenience Functions for Package `lavaan`","text":"One might decide look saturated lavaan model first. looks good far, might also want check indirect effects (mediations). , obtain path names setting label = TRUE. allow us define indirect effects feed back write_lavaan. , check mediation section model, see “augmented” path names. visual_speed, visual_textual, ageyr_visual, grade_visual. logic determination path names predictable: always predictor variable, left, followed predicted variable, right. test possible indirect effects, define indirect object : preferred (e.g., dealing long variable names), one can choose use letters predictor variables. Note however tends somewhat confusing ambiguous. case, path names a_speed, a_textual, a_visual, b_visual. define indirect object : also experimental feature attempts produce indirect effects automatically. feature requires specifying dependent mediator variables “DV” “M”, respectively, indirect object. case, already defined earlier, can just feed proper objects. now satisfied model, can finally fit !  speed predicted ageyr isn’t significant. remove path model trying make parsimonious model. Let’s make non-saturated path analysis model next.","code":"# Calculate scale averages data <- HolzingerSwineford1939 data$visual <- rowMeans(data[paste0(\"x\", 1:3)]) data$textual <- rowMeans(data[paste0(\"x\", 4:6)]) data$speed <- rowMeans(data[paste0(\"x\", 7:9)])  # Check what we have head(data) #>   id sex ageyr agemo  school grade       x1   x2    x3       x4   x5        x6 #> 1  1   1    13     1 Pasteur     7 3.333333 7.75 0.375 2.333333 5.75 1.2857143 #> 2  2   2    13     7 Pasteur     7 5.333333 5.25 2.125 1.666667 3.00 1.2857143 #> 3  3   2    13     1 Pasteur     7 4.500000 5.25 1.875 1.000000 1.75 0.4285714 #> 4  4   1    13     2 Pasteur     7 5.333333 7.75 3.000 2.666667 4.50 2.4285714 #> 5  5   2    12     2 Pasteur     7 4.833333 4.75 0.875 2.666667 4.00 2.5714286 #> 6  6   2    14     1 Pasteur     7 5.333333 5.00 2.250 1.000000 3.00 0.8571429 #>         x7   x8       x9   visual  textual    speed #> 1 3.391304 5.75 6.361111 3.819444 3.123016 5.167472 #> 2 3.782609 6.25 7.916667 4.236111 1.984127 5.983092 #> 3 3.260870 3.90 4.416667 3.875000 1.059524 3.859179 #> 4 3.000000 5.30 4.861111 5.361111 3.198413 4.387037 #> 5 3.695652 6.30 5.916667 3.486111 3.079365 5.304106 #> 6 4.347826 6.65 7.500000 4.194444 1.619048 6.165942  # Define our variables (M <- \"visual\") #> [1] \"visual\" (IV <- c(\"ageyr\", \"grade\")) #> [1] \"ageyr\" \"grade\" (DV <- c(\"speed\", \"textual\")) #> [1] \"speed\"   \"textual\"  # Define our lavaan lists (mediation <- list(speed = M,                    textual = M,                    visual = IV)) #> $speed #> [1] \"visual\" #>  #> $textual #> [1] \"visual\" #>  #> $visual #> [1] \"ageyr\" \"grade\" (regression <- list(speed = IV,                     textual = IV)) #> $speed #> [1] \"ageyr\" \"grade\" #>  #> $textual #> [1] \"ageyr\" \"grade\" (covariance <- list(speed = \"textual\",                     ageyr = \"grade\")) #> $speed #> [1] \"textual\" #>  #> $ageyr #> [1] \"grade\"  # Write the model, and check it model.saturated <- write_lavaan(mediation, regression, covariance) cat(model.saturated) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual #> textual ~ visual #> visual ~ ageyr + grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ ageyr + grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade # We can run the model again. However, we set `label = TRUE` to get the path names model.saturated <- write_lavaan(mediation, regression, covariance, label = TRUE) cat(model.saturated) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ ageyr + grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade # Define indirect object (indirect <- list(ageyr_visual_speed = c(\"ageyr_visual\", \"visual_speed\"),                   ageyr_visual_textual = c(\"ageyr_visual\", \"visual_textual\"),                   grade_visual_speed = c(\"grade_visual\", \"visual_speed\"),                   grade_visual_textual = c(\"grade_visual\", \"visual_textual\"))) #> $ageyr_visual_speed #> [1] \"ageyr_visual\" \"visual_speed\" #>  #> $ageyr_visual_textual #> [1] \"ageyr_visual\"   \"visual_textual\" #>  #> $grade_visual_speed #> [1] \"grade_visual\" \"visual_speed\" #>  #> $grade_visual_textual #> [1] \"grade_visual\"   \"visual_textual\"  # Write the model, and check it model.saturated <- write_lavaan(mediation, regression, covariance,                                  indirect, label = TRUE) cat(model.saturated) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ ageyr + grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade #>  #> ################################################## #> # [--------Mediations (indirect effects)---------] #>  #> ageyr_visual_speed := ageyr_visual * visual_speed #> ageyr_visual_textual := ageyr_visual * visual_textual #> grade_visual_speed := grade_visual * visual_speed #> grade_visual_textual := grade_visual * visual_textual # Write the model, and check it model.saturated <- write_lavaan(mediation, regression, covariance,                                  label = TRUE, use.letters = TRUE) cat(model.saturated) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ a_speed*visual #> textual ~ a_textual*visual #> visual ~ a_visual*ageyr + b_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ ageyr + grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade # Define indirect object (indirect <- list(ageyr_visual_speed = c(\"a_visual\", \"a_speed\"),                   ageyr_visual_textual = c(\"a_visual\", \"a_textual\"),                   grade_visual_speed = c(\"b_visual\", \"a_speed\"),                   grade_visual_textual = c(\"b_visual\", \"a_textual\"))) #> $ageyr_visual_speed #> [1] \"a_visual\" \"a_speed\"  #>  #> $ageyr_visual_textual #> [1] \"a_visual\"  \"a_textual\" #>  #> $grade_visual_speed #> [1] \"b_visual\" \"a_speed\"  #>  #> $grade_visual_textual #> [1] \"b_visual\"  \"a_textual\"  # Write the model, and check it model.saturated <- write_lavaan(mediation, regression, covariance,                                  indirect, label = TRUE, use.letters = TRUE) cat(model.saturated) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ a_speed*visual #> textual ~ a_textual*visual #> visual ~ a_visual*ageyr + b_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ ageyr + grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade #>  #> ################################################## #> # [--------Mediations (indirect effects)---------] #>  #> ageyr_visual_speed := a_visual * a_speed #> ageyr_visual_textual := a_visual * a_textual #> grade_visual_speed := b_visual * a_speed #> grade_visual_textual := b_visual * a_textual # Define indirect object (indirect <- list(M = M,                    DV = DV)) #> $M #> [1] \"visual\" #>  #> $DV #> [1] \"speed\"   \"textual\"  # Write the model, and check it model.saturated <- write_lavaan(mediation, regression, covariance,                                  indirect, label = TRUE) cat(model.saturated) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ ageyr + grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade #>  #> ################################################## #> # [--------Mediations (indirect effects)---------] #>  #> ageyr_visual_speed := ageyr_visual * visual_speed #> ageyr_visual_textual := ageyr_visual * visual_textual #> grade_visual_speed := grade_visual * visual_speed #> grade_visual_textual := grade_visual * visual_textual # Fit the model with `lavaan` fit.saturated <- lavaan(model.saturated, data = data, auto.var = TRUE)  # Get regression parameters only and make it pretty with the `rempsyc::nice_table` integration lavaan_reg(fit.saturated, nice_table = TRUE, highlight = TRUE)"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"path-analysis-model","dir":"","previous_headings":"SEM example","what":"Path analysis model","title":"Convenience Functions for Package `lavaan`","text":"use lavaanExtra, don’t redefine entire model: simply want update. case, regressions indirect effects.     reference, model, visually speaking","code":"(regression <- list(speed = \"grade\",                     textual = IV)) #> $speed #> [1] \"grade\" #>  #> $textual #> [1] \"ageyr\" \"grade\" # We check that we have removed \"ageyr\" correctly from \"speed\". OK.  # We can run the model again, setting `label = TRUE` to get the path names model.path <- write_lavaan(mediation, regression, covariance, label = TRUE) cat(model.path) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade # We check that we have removed \"ageyr\" correctly from \"speed\" in the  # regression section. OK.  # Define just our indirect effects of interest (indirect <- list(age_visual_speed = c(\"visual_speed\", \"ageyr_visual\"),                   grade_visual_textual = c(\"visual_textual\", \"grade_visual\"))) #> $age_visual_speed #> [1] \"visual_speed\" \"ageyr_visual\" #>  #> $grade_visual_textual #> [1] \"visual_textual\" \"grade_visual\"  # We run the model again, with the indirect effects model.path <- write_lavaan(mediation, regression, covariance,                             indirect, label = TRUE) cat(model.path) #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade #>  #> ################################################## #> # [--------Mediations (indirect effects)---------] #>  #> age_visual_speed := visual_speed * ageyr_visual #> grade_visual_textual := visual_textual * grade_visual  # Fit the model with `lavaan` fit.path <- lavaan(model.path, data = data, auto.var = TRUE)  # Get regression parameters only and make it pretty with the `rempsyc::nice_table` integration lavaan_reg(fit.path, nice_table = TRUE, highlight = TRUE) # We only kept significant regressions. Good (for this demo).  # Get covariance indices lavaan_cov(fit.path) #>    Variable.1 Variable.2     r     p #> 8       speed    textual 0.131 0.024 #> 9       ageyr      grade 0.511 0.000 #> 10      speed      speed 0.824 0.000 #> 11    textual    textual 0.765 0.000 #> 12     visual     visual 0.942 0.000 #> 13      ageyr      ageyr 1.000 0.000 #> 14      grade      grade 1.000 0.000  # We can get it prettier with the `rempsyc::nice_table` integration lavaan_cov(fit.path, nice_table = TRUE) # Get fit indices nice_fit(fit.cfa, fit.saturated, fit.path) #>           Model   chi2 df chi2.df     p   CFI   TLI RMSEA  SRMR      AIC #> 1       fit.cfa 85.306 24   3.554 0.000 0.931 0.896 0.092 0.065 7517.490 #> 2 fit.saturated  0.000  0     NaN    NA 1.000 1.000 0.000 0.000 3483.460 #> 3      fit.path  0.327  1   0.327 0.568 1.000 1.028 0.000 0.007 3481.787 #>        BIC #> 1 7595.339 #> 2 3539.017 #> 3 3533.640  # We can get it prettier with the `rempsyc::nice_table` integration nice_fit(fit.cfa, fit.saturated, fit.path, nice_table = TRUE) # Let's get the indirect effects only lavaan_ind(fit.path) #>         Indirect.Effect                       Paths      B     p #> 15     age_visual_speed   visual_speed*ageyr_visual -0.033 0.037 #> 16 grade_visual_textual visual_textual*grade_visual  0.066 0.002  # We can get it prettier with the `rempsyc::nice_table` integration lavaan_ind(fit.path, nice_table = TRUE) # Get modification indices only head(inspect(fit.path, \"mi\")) #>       lhs op     rhs    mi    epc sepc.lv sepc.all sepc.nox #> 17  speed ~~  visual 0.326  0.147   0.147    0.234    0.234 #> 18  speed ~~   ageyr 0.326  0.022   0.022    0.029    0.029 #> 19  speed ~~   grade 0.326 -0.021  -0.021   -0.056   -0.056 #> 25  speed  ~ textual 0.326 -0.067  -0.067   -0.087   -0.087 #> 26  speed  ~   ageyr 0.326  0.027   0.027    0.035    0.035 #> 28 visual  ~   speed 0.326  0.269   0.269    0.250    0.250"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"latent-model","dir":"","previous_headings":"SEM example","what":"Latent model","title":"Convenience Functions for Package `lavaan`","text":"Finally, perhaps change mind decide run full SEM instead, latent variables. Fear : don’t redo everything . can simply define latent variables proceed. example, already defined latent variable CFA earlier, don’t even need write !","code":"model.latent <- write_lavaan(mediation, regression, covariance,                               indirect, latent, label = TRUE) cat(model.latent) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9 #>  #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> speed ~ grade #> textual ~ ageyr + grade #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade #>  #> ################################################## #> # [--------Mediations (indirect effects)---------] #>  #> age_visual_speed := visual_speed * ageyr_visual #> grade_visual_textual := visual_textual * grade_visual  # Run model fit.latent <- lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE,                auto.fix.first = TRUE, auto.cov.lv.x = TRUE)  # Get fit indices nice_fit(fit.cfa, fit.saturated, fit.path, fit.latent) #>           Model    chi2 df chi2.df     p   CFI   TLI RMSEA  SRMR      AIC #> 1       fit.cfa  85.306 24   3.554 0.000 0.931 0.896 0.092 0.065 7517.490 #> 2 fit.saturated   0.000  0     NaN    NA 1.000 1.000 0.000 0.000 3483.460 #> 3      fit.path   0.327  1   0.327 0.568 1.000 1.028 0.000 0.007 3481.787 #> 4    fit.latent 118.917 37   3.214 0.000 0.924 0.888 0.086 0.061 8638.789 #>        BIC #> 1 7595.339 #> 2 3539.017 #> 3 3533.640 #> 4 8746.198  # We can get it prettier with the `rempsyc::nice_table` integration nice_fit(fit.cfa, fit.saturated, fit.path, fit.latent, nice_table = TRUE)"},{"path":"https://lavaanExtra.remi-theriault.com/index.html","id":"support-me-and-this-package","dir":"","previous_headings":"","what":"Support me and this package","title":"Convenience Functions for Package `lavaan`","text":"Thank support. can support package : https://github.com/sponsors/rempsyc","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant indirect effects indices from lavaan model — lavaan_cov","title":"Extract relevant indirect effects indices from lavaan model — lavaan_cov","text":"Extract relevant indirect effects indices lavaan model.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant indirect effects indices from lavaan model — lavaan_cov","text":"","code":"lavaan_cov(fit, nice_table = FALSE, ...)"},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant indirect effects indices from lavaan model — lavaan_cov","text":"fit lavaan fit object extract fit indices nice_table Logical, whether print table rempsyc::nice_table well print reference values bottom table. ... Arguments passed rempsyc::nice_table","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant indirect effects indices from lavaan model — lavaan_cov","text":"","code":"(latent <- list(visual = paste0(\"x\", 1:3),                 textual = paste0(\"x\", 4:6),                 speed = paste0(\"x\", 7:9))) #> $visual #> [1] \"x1\" \"x2\" \"x3\" #>  #> $textual #> [1] \"x4\" \"x5\" \"x6\" #>  #> $speed #> [1] \"x7\" \"x8\" \"x9\" #>   (regression <- list(ageyr = c(\"visual\", \"textual\", \"speed\"),                     grade = c(\"visual\", \"textual\", \"speed\"))) #> $ageyr #> [1] \"visual\"  \"textual\" \"speed\"   #>  #> $grade #> [1] \"visual\"  \"textual\" \"speed\"   #>   (covariance <- list(speed = \"textual\", ageyr = \"grade\")) #> $speed #> [1] \"textual\" #>  #> $ageyr #> [1] \"grade\" #>   HS.model <- write_lavaan(regression = regression, covariance = covariance,                          latent = latent, label = TRUE) cat(HS.model) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9 #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> ageyr ~ visual + textual + speed #> grade ~ visual + textual + speed #>  #> ################################################## #> # [------------------Covariances-----------------] #>  #> speed ~~ textual #> ageyr ~~ grade #>   library(lavaan) #> This is lavaan 0.6-12 #> lavaan is FREE software! Please report any bugs. fit <- lavaan(HS.model, data=HolzingerSwineford1939,               auto.var=TRUE, auto.fix.first=TRUE,               auto.cov.lv.x=TRUE) lavaan_cov(fit) #>    Variable.1 Variable.2     r     p #> 16    textual      speed 0.268 0.001 #> 17      ageyr      grade 0.533 0.000 #> 18         x1         x1 0.395 0.000 #> 19         x2         x2 0.820 0.000 #> 20         x3         x3 0.667 0.000 #> 21         x4         x4 0.268 0.000 #> 22         x5         x5 0.264 0.000 #> 23         x6         x6 0.311 0.000 #> 24         x7         x7 0.641 0.000 #> 25         x8         x8 0.437 0.000 #> 26         x9         x9 0.610 0.000 #> 27      ageyr      ageyr 0.839 0.000 #> 28      grade      grade 0.809 0.000 #> 29     visual     visual 1.000 0.000 #> 30    textual    textual 1.000 0.000 #> 31      speed      speed 1.000 0.000 #> 32     visual    textual 0.458 0.000 #> 33     visual      speed 0.438 0.000"},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant indirect effects indices from lavaan model — lavaan_ind","title":"Extract relevant indirect effects indices from lavaan model — lavaan_ind","text":"Extract relevant indirect effects indices lavaan model.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant indirect effects indices from lavaan model — lavaan_ind","text":"","code":"lavaan_ind(fit, nice_table = FALSE, ...)"},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_ind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant indirect effects indices from lavaan model — lavaan_ind","text":"fit lavaan fit object extract fit indices nice_table Logical, whether print table rempsyc::nice_table well print reference values bottom table. ... Arguments passed rempsyc::nice_table","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_ind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant indirect effects indices from lavaan model — lavaan_ind","text":"","code":"(latent <- list(visual = paste0(\"x\", 1:3),                 textual = paste0(\"x\", 4:6),                 speed = paste0(\"x\", 7:9))) #> $visual #> [1] \"x1\" \"x2\" \"x3\" #>  #> $textual #> [1] \"x4\" \"x5\" \"x6\" #>  #> $speed #> [1] \"x7\" \"x8\" \"x9\" #>   (mediation <- list(speed = \"visual\",                    textual = \"visual\",                    visual = c(\"ageyr\", \"grade\"))) #> $speed #> [1] \"visual\" #>  #> $textual #> [1] \"visual\" #>  #> $visual #> [1] \"ageyr\" \"grade\" #>   (indirect <- list(M = \"visual\", DV = c(\"speed\", \"textual\"))) #> $M #> [1] \"visual\" #>  #> $DV #> [1] \"speed\"   \"textual\" #>   HS.model <- write_lavaan(mediation, indirect = indirect,                          latent = latent, label = TRUE) cat(HS.model) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9 #>  #> ################################################## #> # [-----------Mediations (named paths)-----------] #>  #> speed ~ visual_speed*visual #> textual ~ visual_textual*visual #> visual ~ ageyr_visual*ageyr + grade_visual*grade #>  #> ################################################## #> # [--------Mediations (indirect effects)---------] #>  #> ageyr_visual_speed := ageyr_visual * visual_speed #> ageyr_visual_textual := ageyr_visual * visual_textual #> grade_visual_speed := grade_visual * visual_speed #> grade_visual_textual := grade_visual * visual_textual #>   library(lavaan) fit <- lavaan(HS.model, data=HolzingerSwineford1939,               auto.var=TRUE, auto.fix.first=TRUE,               auto.cov.lv.x=TRUE) lavaan_ind(fit) #>         Indirect.Effect                       Paths      B     p #> 29   ageyr_visual_speed   ageyr_visual*visual_speed -0.152 0.001 #> 30 ageyr_visual_textual ageyr_visual*visual_textual -0.154 0.000 #> 31   grade_visual_speed   grade_visual*visual_speed  0.249 0.000 #> 32 grade_visual_textual grade_visual*visual_textual  0.253 0.000"},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant regression indices from lavaan model — lavaan_reg","title":"Extract relevant regression indices from lavaan model — lavaan_reg","text":"Extract relevant regression indices lavaan model.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant regression indices from lavaan model — lavaan_reg","text":"","code":"lavaan_reg(fit, nice_table = FALSE, ...)"},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant regression indices from lavaan model — lavaan_reg","text":"fit lavaan fit object extract fit indices nice_table Logical, whether print table rempsyc::nice_table well print reference values bottom table. ... Arguments passed rempsyc::nice_table","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/lavaan_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant regression indices from lavaan model — lavaan_reg","text":"","code":"(latent <- list(visual = paste0(\"x\", 1:3),                 textual = paste0(\"x\", 4:6),                 speed = paste0(\"x\", 7:9))) #> $visual #> [1] \"x1\" \"x2\" \"x3\" #>  #> $textual #> [1] \"x4\" \"x5\" \"x6\" #>  #> $speed #> [1] \"x7\" \"x8\" \"x9\" #>   (regression <- list(ageyr = c(\"visual\", \"textual\", \"speed\"),                     grade = c(\"visual\", \"textual\", \"speed\"))) #> $ageyr #> [1] \"visual\"  \"textual\" \"speed\"   #>  #> $grade #> [1] \"visual\"  \"textual\" \"speed\"   #>   HS.model <- write_lavaan(latent = latent, regression = regression) cat(HS.model) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9 #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> ageyr ~ visual + textual + speed #> grade ~ visual + textual + speed #>   library(lavaan) fit <- lavaan(HS.model, data=HolzingerSwineford1939,               auto.var=TRUE, auto.fix.first=TRUE,               auto.cov.lv.x=TRUE) lavaan_reg(fit) #>    Outcome Predictor      B     p #> 10   ageyr    visual -2.712 0.024 #> 11   ageyr   textual  0.615 0.213 #> 12   ageyr     speed  2.516 0.011 #> 13   grade    visual -2.277 0.012 #> 14   grade   textual  0.888 0.024 #> 15   grade     speed  2.237 0.003"},{"path":"https://lavaanExtra.remi-theriault.com/reference/nice_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant fit indices from lavaan model — nice_fit","title":"Extract relevant fit indices from lavaan model — nice_fit","text":"Compares fit one several lavaan models. Also optionally includes references values. reference fit values based Schreiber et al. (2006). Schreiber, J. B., Nora, ., Stage, F. K., Barlow, E. ., & King, J. (2006). Reporting structural equation modeling confirmatory factor analysis results: review. Journal educational research, 99(6), 323-338. https://doi.org/10.3200/JOER.99.6.323-338","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/nice_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant fit indices from lavaan model — nice_fit","text":"","code":"nice_fit(..., nice_table = FALSE)"},{"path":"https://lavaanExtra.remi-theriault.com/reference/nice_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant fit indices from lavaan model — nice_fit","text":"... lavaan model objects extract fit indices nice_table Logical, whether print table rempsyc::nice_table well print reference values bottom table.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/nice_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant fit indices from lavaan model — nice_fit","text":"","code":"(latent <- list(visual = paste0(\"x\", 1:3),                 textual = paste0(\"x\", 4:6),                 speed = paste0(\"x\", 7:9))) #> $visual #> [1] \"x1\" \"x2\" \"x3\" #>  #> $textual #> [1] \"x4\" \"x5\" \"x6\" #>  #> $speed #> [1] \"x7\" \"x8\" \"x9\" #>   (regression <- list(ageyr = c(\"visual\", \"textual\", \"speed\"),                     grade = c(\"visual\", \"textual\", \"speed\"))) #> $ageyr #> [1] \"visual\"  \"textual\" \"speed\"   #>  #> $grade #> [1] \"visual\"  \"textual\" \"speed\"   #>   HS.model <- write_lavaan(latent = latent, regression = regression) cat(HS.model) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9 #>  #> ################################################## #> # [---------Regressions (Direct effects)---------] #>  #> ageyr ~ visual + textual + speed #> grade ~ visual + textual + speed #>   library(lavaan) fit <- lavaan(HS.model, data=HolzingerSwineford1939,               auto.var=TRUE, auto.fix.first=TRUE,               auto.cov.lv.x=TRUE) nice_fit(fit) #>   Model    chi2 df chi2.df p   CFI   TLI RMSEA  SRMR      AIC      BIC #> 1   fit 173.661 37   4.694 0 0.874 0.813 0.111 0.072 8693.533 8800.942"},{"path":"https://lavaanExtra.remi-theriault.com/reference/write_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector-based lavaan syntax interpreter — write_lavaan","title":"Vector-based lavaan syntax interpreter — write_lavaan","text":"Vector-based lavaan syntax interpreter.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/write_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector-based lavaan syntax interpreter — write_lavaan","text":"","code":"write_lavaan(   mediation = NULL,   regression = NULL,   covariance = NULL,   indirect = NULL,   latent = NULL,   intercept = NULL,   label = FALSE,   use.letters = FALSE )"},{"path":"https://lavaanExtra.remi-theriault.com/reference/write_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector-based lavaan syntax interpreter — write_lavaan","text":"mediation Mediation    indicators (~ symbol: \"regressed \"). Differs argument regression path names can optionally specified automatically argument label. regression Regression indicators (~ symbol: \"regressed \"). covariance (Residual) (co)variance indicators (~~ symbol: \"correlated \"). indirect Indirect effect indicators (:= symbol: \"indirect effect defined \"). latent Latent variable indicators (=~ symbol: \"measured \"). intercept Intercept indicators (~ 1 symbol: \"intercept\"). label Logical, whether display path names mediation argument. use.letters Logical, labels, whether use letters instead variable names.","code":""},{"path":"https://lavaanExtra.remi-theriault.com/reference/write_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector-based lavaan syntax interpreter — write_lavaan","text":"","code":"(latent <- list(visual = paste0(\"x\", 1:3),                 textual = paste0(\"x\", 4:6),                 speed = paste0(\"x\", 7:9))) #> $visual #> [1] \"x1\" \"x2\" \"x3\" #>  #> $textual #> [1] \"x4\" \"x5\" \"x6\" #>  #> $speed #> [1] \"x7\" \"x8\" \"x9\" #>   HS.model <- write_lavaan(latent = latent) cat(HS.model) #> ################################################## #> # [---------------Latent variables---------------] #>  #> visual =~ x1 + x2 + x3 #> textual =~ x4 + x5 + x6 #> speed =~ x7 + x8 + x9 #>   library(lavaan) fit <- lavaan(HS.model, data=HolzingerSwineford1939,               auto.var=TRUE, auto.fix.first=TRUE,               auto.cov.lv.x=TRUE) summary(fit, fit.measures=TRUE) #> lavaan 0.6-12 ended normally after 35 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        21 #>  #>   Number of observations                           301 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                85.306 #>   Degrees of freedom                                24 #>   P-value (Chi-square)                           0.000 #>  #> Model Test Baseline Model: #>  #>   Test statistic                               918.852 #>   Degrees of freedom                                36 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    0.931 #>   Tucker-Lewis Index (TLI)                       0.896 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)              -3737.745 #>   Loglikelihood unrestricted model (H1)      -3695.092 #>                                                        #>   Akaike (AIC)                                7517.490 #>   Bayesian (BIC)                              7595.339 #>   Sample-size adjusted Bayesian (BIC)         7528.739 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.092 #>   90 Percent confidence interval - lower         0.071 #>   90 Percent confidence interval - upper         0.114 #>   P-value RMSEA <= 0.05                          0.001 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.065 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   visual =~                                            #>     x1                1.000                            #>     x2                0.554    0.100    5.554    0.000 #>     x3                0.729    0.109    6.685    0.000 #>   textual =~                                           #>     x4                1.000                            #>     x5                1.113    0.065   17.014    0.000 #>     x6                0.926    0.055   16.703    0.000 #>   speed =~                                             #>     x7                1.000                            #>     x8                1.180    0.165    7.152    0.000 #>     x9                1.082    0.151    7.155    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   visual ~~                                            #>     textual           0.408    0.074    5.552    0.000 #>     speed             0.262    0.056    4.660    0.000 #>   textual ~~                                           #>     speed             0.173    0.049    3.518    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.549    0.114    4.833    0.000 #>    .x2                1.134    0.102   11.146    0.000 #>    .x3                0.844    0.091    9.317    0.000 #>    .x4                0.371    0.048    7.779    0.000 #>    .x5                0.446    0.058    7.642    0.000 #>    .x6                0.356    0.043    8.277    0.000 #>    .x7                0.799    0.081    9.823    0.000 #>    .x8                0.488    0.074    6.573    0.000 #>    .x9                0.566    0.071    8.003    0.000 #>     visual            0.809    0.145    5.564    0.000 #>     textual           0.979    0.112    8.737    0.000 #>     speed             0.384    0.086    4.451    0.000 #>"},{"path":"https://lavaanExtra.remi-theriault.com/news/index.html","id":"lavaanextra-0010","dir":"Changelog","previous_headings":"","what":"lavaanExtra 0.0.1.0","title":"lavaanExtra 0.0.1.0","text":"Added automatic indirect effects","code":""},{"path":"https://lavaanExtra.remi-theriault.com/news/index.html","id":"lavaanextra-0009","dir":"Changelog","previous_headings":"","what":"lavaanExtra 0.0.0.9","title":"lavaanExtra 0.0.0.9","text":"First package version","code":""}]
